import com.chrynan.video.buildSrc.AppConstants
import com.chrynan.video.buildSrc.plugins.schema.CreateSchemaJsonPlugin

apply plugin: "kotlin-multiplatform"
apply plugin: "com.android.library"
apply plugin: "digital.wup.android-maven-publish"
apply plugin: "kotlinx-serialization"
apply plugin: "com.apollographql.apollo"
apply plugin: CreateSchemaJsonPlugin

group AppConstants.appGroup
version AppConstants.appVersion

kotlin {
    targets {
        jvm()
        fromPreset(presets.android, "android")
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.7"

                // HTTP
                api "io.ktor:ktor-client-core:1.3.2"
                api "io.ktor:ktor-client-serialization:1.3.2"
                api "io.ktor:ktor-client-logging:1.3.2"

                // GraphQL Client - Apollo
                api "com.apollographql.apollo:apollo-api:2.3.0"
                implementation "com.apollographql.apollo:apollo-runtime-kotlin:2.3.0"
                implementation "com.apollographql.apollo:apollo-normalized-cache-sqlite:2.3.0"

                // Serialization
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.20.0"

                // Logging
                api "com.chrynan.logger:logger-core:1.2.1"
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib"

                implementation "javax.inject:javax.inject:1"

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"

                // HTTP
                api "io.ktor:ktor-client-okhttp:1.3.2"
                api "io.ktor:ktor-client-serialization-jvm:1.3.2"
                api "io.ktor:ktor-client-logging-jvm:1.3.2"

                // GraphQL Client - Apollo
                api "com.apollographql.apollo:apollo-api-jvm:2.3.0"

                // Serialization
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0"

                // Logging
                api "com.chrynan.logger:logger-core-jvm:1.2.1"
            }
        }
        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib"

                implementation "javax.inject:javax.inject:1"

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"

                // HTTP
                api "io.ktor:ktor-client-okhttp:1.3.2"
                api "io.ktor:ktor-client-serialization-jvm:1.3.2"
                api "io.ktor:ktor-client-logging-jvm:1.3.2"

                // GraphQL Client - Apollo
                api "com.apollographql.apollo:apollo-api-jvm:2.3.0"

                // Serialization
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0"

                // Logging
                api "com.chrynan.logger:logger-core-jvm:1.2.1"
            }
        }
    }
}

android {
    compileSdkVersion AppConstants.androidCompileSdkVersion
    defaultConfig {
        minSdkVersion AppConstants.androidMinSdkVersion
        targetSdkVersion AppConstants.androidTargetSdkVerison
        versionCode AppConstants.appVersionCode
        versionName AppConstants.appVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            matchingFallbacks = ["debug"]
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    sourceSets {
        main {
            manifest.srcFile "src/androidMain/AndroidManifest.xml"
            java.srcDirs = ["src/androidMain/kotlin"]
            res.srcDirs = ["src/androidMain/res"]
        }
        test {
            java.srcDirs = ["src/androidTest/kotlin"]
            res.srcDirs = ["src/androidTest/res"]
        }
    }
}

dependencies {

}

graphQLSchemaJson {
    graphQLDirectory = "${project.rootDir.path}/api/graphql/"
    schemaOutputDirectory = "${project.projectDir.path}/src/commonMain/graphql/"
}

apollo {
    generateKotlinModels = true
    customTypeMapping = [
            "Moment"   : "kotlin.String",
            "UriString": "kotlin.String",
            "Cursor"   : "kotlin.String"
    ]
}

project.tasks.whenTaskAdded { task ->
    if (task.name == "generateApolloSources" || task.name == "generateCommonMainApolloSources") {
        task.dependsOn(createSchemaJson)
    }
}

configurations {
    compileClasspath
}

publishing {
    publications {
        kotlinMultiplatform {
            artifactId = "video-common"
        }
        jvm {
            artifactId = "video-common-jvm"
        }
        MavenPub(MavenPublication) {
            from(components.android)
            artifactId "video-common-android"
        }
        metadata {
            artifactId = "video-common-metadata"
        }
    }
}
