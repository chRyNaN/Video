scalar Cursor

interface Edge {
  cursor: Cursor!
}

interface Connection {
  totalCount: Int!
  pageInfo: PageInfo!
}

type PageInfo {
  isFirstPage: Boolean!
  isLastPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type Uri {
  scheme: String!
  authority: String
  userInfo: String
  host: String
  port: String
  path: String!
  query: String
  fragment: String
}

type UserConnection implements Connection {
  edges: [UserEdge!]!
}

type UserEdge implements Edge {
  node: User!
}

type User {
  id: ID!
  provider: Provider!
  created: String!
  lastUpdated: String!
  name: String!
  email: String!
  username: String
  phoneNumber: String
  imageUri(imageType: ImageType! = MAIN): Uri
  notesConnection(take: Int!, after: Cursor): NotesConnection!
  ratingsConnection(take: Int!, after: Cursor): RatingsConnection!
  subscribedChannelsConnection(take: Int!, after: Cursor): ChannelsConnection!
  membershipsConnection(take: Int!, after: Cursor): PublishersConnection!
}

type Provider {
  uri: Uri!
  created: String!
  lastUpdated: String!
  name: String!
  description: String!
  details: String
  imageUri(imageType: ImageType! = MAIN): Uri
  website: Uri
  contactEmail: String!
  contactPhoneNumber: String!
  publishersConnection(take: Int!, after: Cursor): PublisherConnection!
}

type PublisherConnection implements Connection {
  edges: [PublisherEdge!]!
}

type PublisherEdge implements Edge {
  node: Publisher!
}

type Publisher {
  id: ID!
  provider: Provider!
  created: String!
  lastUpdated: String!
  name: String!
  description: String!
  details: String
  imageUri(imageType: ImageType! = MAIN): Uri
  website: Uri
  channelsConnection(take: Int!, after: Cursor): ChannelConnection!
  membersConnection(take: Int!, after: Cursor): UserConnection!
}

type ChannelConnection implements Connection {
  edges: [ChannelEdge!]!
}

type ChannelEdge implements Edge {
  node: Channel!
}

type Channel {
  id: ID!
  provider: Provider!
  publisher: Publisher!
  created: String!
  published: String!
  lastUpdated: String!
  name: String!
  description: String!
  details: String
  imageUri(imageType: ImageType! = MAIN): Uri
  website: Uri
  videosConnection(take: Int!, after: Cursor): VideoConnection!
  subscribersConnection(take: Int!, after: Cursor): UserConnection!
}

type VideoConnection implements Connection {
  edges: [VideoEdge!]!
}

type VideoEdge implements Edge {
  node: Video!
}

type Video {
  id: ID!
  provider: Provider!
  publisher: Publisher!
  channel: Channel!
  created: String!
  published: String!
  lastUpdated: String!
  name: String!
  description: String!
  details: String
  imageUri: Uri
  category: String
  tags: [String!]!
  viewCount: Int
  supportsRating: Boolean!
  videoDetails: VideoDetails!
  contentRating: ContentRating!
  ratingsConnection(take: Int!, after: Cursor): RatingConnection!
  notesConnection(take: Int!, after: Cursor): NoteConnection!
  videoContributorsConnection(take: Int!, after: Cursor): VideoContributorConnection!
}

type VideoDetails {
  isLive: Boolean!
  initialDelay: Float
  length: Float
  formatType: FormatType!
  containerFormat: ContainerFormat!
  videoType: VideoType!
  uri: Uri!
  standaloneSubtitle: Subtitle
}

type Subtitle {
  uri: Uri!
  format: SubtitleFormat!
}

type RatingConnection implements Connection {
  rateUpCount: Int!
  rateDownCount: Int!
  edges: [RatingEdge!]!
}

type RatingEdge implements Edge {
  node: Rating!
}

type Rating {
  id: ID!
  created: String!
  lastUpdated: String!
  video: Video!
  user: User!
  ratingType: RatingType!
}

type RatingType {
  UP
  DOWN
}

type NoteConnection implements Connection {
  edges: [NoteEdge!]!
}

type NoteEdge implements Edge {
  node: Note!
}

type Note {
  id: ID!
  created: String!
  lastUpdated: String!
  video: Video!
  user: User!
  content: String!
}

type VideoContributorConnection implements Connection {
  edges: [VideoContributorEdge!]!
}

type VideoContributorEdge implements Edge {
  node: VideoContributor!
}

type VideoContributor {
  id: ID!,
  name: String!
  position: String!
  role: VideoCreditRole!
  imageUri(imageType: ImageType! = MAIN): Uri
}

type ContentRating {
  minAge: Int!
  discretionAdvised: Boolean!
  standard: String
  issuer: String
  type: ContentRatingType!
}

enum ContentRatingType {
  G
  PG
  PG_13
  R
  OTHER
  UNKNOWN
}

enum VideoCreditRole {
  CREATOR
  OWNER
  PUBLISHER
  PRODUCER
  DIRECTOR
  WRITER
  CONTRIBUTOR
  COMPOSER
  ACTOR
  HOST
  STAR
  OTHER
  UNKNOWN
}

enum VideoType {
  MOVIE
  PREVIEW
  SHOW
  SHORT_SERIES
  CLIP
  HOME_VIDEO
  RECORDING
  SNIPPET
  LIVE_STREAM
  MUSIC_VIDEO
  PRESENTATION
  VLOG
  PODCAST
  NEWS
  VIDEO
  OTHER
  UNKNOWN
}

enum FormatType {
  PROGRESSIVE
  DASH
  SMOOTH_STREAMING
  HLS
  UNKNOWN
}

enum ContainerFormat {
  MP4
  M4A
  FMP4
  WEBM
  MATROSKA
  MP3
  OGG
  WAV
  MPEG_TS
  MPEG_PS
  FLV
  ADTS_AAC
  FLAC
  AMR
  UNKNOWN
}

enum SubtitleFormat {
  WEBVTT
  TTML
  SMPTE_TT
  SUBRIP
  SSA
  ASS
  UNKNOWN
}

enum ImageType {
  MAIN
  HEADER
}