type UserConnection implements Connection {
    pageInfo: PageInfo!
    totalCount: Int!
    edges: [UserEdge!]!
    nodes: [User!]!
}

type UserEdge implements Edge {
    cursor: Cursor!
    node: User!
}

type User implements Node {
    id: ID!
    provider: Provider!
    created: String!
    lastUpdated: String!
    name: String!
    email: String!
    username: String
    phoneNumber: String
    imageUri(imageType: ImageType! = MAIN): UriString
    reactionsConnection(take: Int!, after: Cursor): ReactionConnection!
    notesConnection(take: Int!, after: Cursor): NoteConnection!
    ratingsConnection(take: Int!, after: Cursor): RatingConnection!
    subscribedChannelsConnection(take: Int!, after: Cursor): ChannelConnection!
}

type Provider {
    uri: UriString!
    created: String!
    lastUpdated: String!
    name: String!
    description: String!
    details: String
    imageUri(imageType: ImageType! = MAIN): UriString
    website: UriString
    contactEmail: String!
    contactPhoneNumber: String!
}

type VideoConnection implements Connection {
    pageInfo: PageInfo!
    totalCount: Int!
    edges: [VideoEdge!]!
}

type VideoEdge implements Edge {
    cursor: Cursor!
    node: Video!
}

type Video implements Node{
    id: ID!
    provider: Provider!
    publisher: Publisher!
    channel: Channel!
    created: String!
    published: String!
    lastUpdated: String!
    name: String!
    description: String!
    details: String
    imageUri: Uri
    category: String
    tags: [String!]!
    viewCount: Int
    supportsRating: Boolean!
    videoDetails: VideoDetails!
    contentRating: ContentRating!
    reactionsConnection(take: Int!, after: Cursor): ReactionConnection!
    ratingsConnection(take: Int!, after: Cursor): RatingConnection!
    notesConnection(take: Int!, after: Cursor): NoteConnection!
    videoContributorsConnection(take: Int!, after: Cursor): VideoContributorConnection!
}

type VideoDetails {
    isLive: Boolean!
    initialDelay: Float
    length: Float
    formatType: FormatType!
    containerFormat: ContainerFormat!
    videoType: VideoType!
    uri: Uri!
    standaloneSubtitle: Subtitle
}

type Subtitle {
    uri: Uri!
    format: SubtitleFormat!
}

type RatingConnection implements Connection {
    pageInfo: PageInfo!
    totalCount: Int!
    rateUpCount: Int!
    rateDownCount: Int!
    edges: [RatingEdge!]!
}

type RatingEdge implements Edge {
    cursor: Cursor!
    node: Rating!
}

type Rating {
    id: ID!
    created: String!
    lastUpdated: String!
    video: Video!
    user: User!
    ratingType: RatingType!
}

enum RatingType {
    UP
    DOWN
}

type ReactionConnection implements Connection {
    pageInfo: PageInfo!
    totalCount: Int!
    edges: [ReactionEdge!]!
}

type ReactionEdge implements Edge {
    cursor: Cursor!
    node: Reaction!
}

type Reaction {
    id: ID!
    created: String!
    lastUpdated: String!
    video: Video!
    user: User!
    type: String
    reaction: String!
}

type NoteConnection implements Connection {
    pageInfo: PageInfo!
    totalCount: Int!
    edges: [NoteEdge!]!
}

type NoteEdge implements Edge {
    cursor: Cursor!
    node: Note!
}

type Note {
    id: ID!
    created: String!
    lastUpdated: String!
    video: Video!
    user: User!
    content: String!
}

type VideoContributorConnection implements Connection {
    pageInfo: PageInfo!
    totalCount: Int!
    edges: [VideoContributorEdge!]!
}

type VideoContributorEdge implements Edge {
    cursor: Cursor!
    node: VideoContributor!
}

type VideoContributor {
    id: ID!,
    name: String!
    position: String!
    role: VideoCreditRole!
    imageUri(imageType: ImageType! = MAIN): Uri
}

type ContentRating {
    minAge: Int!
    discretionAdvised: Boolean!
    standard: String
    issuer: String
    type: ContentRatingType!
}

enum ContentRatingType {
    G
    PG
    PG_13
    R
    OTHER
    UNKNOWN
}

enum VideoCreditRole {
    CREATOR
    OWNER
    PUBLISHER
    PRODUCER
    DIRECTOR
    WRITER
    CONTRIBUTOR
    COMPOSER
    ACTOR
    HOST
    STAR
    OTHER
    UNKNOWN
}

enum VideoType {
    MOVIE
    PREVIEW
    SHOW
    SHORT_SERIES
    CLIP
    HOME_VIDEO
    RECORDING
    SNIPPET
    LIVE_STREAM
    MUSIC_VIDEO
    PRESENTATION
    VLOG
    PODCAST
    NEWS
    VIDEO
    GAMING
    OTHER
    UNKNOWN
}

enum FormatType {
    PROGRESSIVE
    DASH
    SMOOTH_STREAMING
    HLS
    UNKNOWN
}

enum ContainerFormat {
    MP4
    M4A
    FMP4
    WEBM
    MATROSKA
    MP3
    OGG
    WAV
    MPEG_TS
    MPEG_PS
    FLV
    ADTS_AAC
    FLAC
    AMR
    UNKNOWN
}

enum SubtitleFormat {
    WEBVTT
    TTML
    SMPTE_TT
    SUBRIP
    SSA
    ASS
    UNKNOWN
}

enum ImageType {
    MAIN
    HEADER
}